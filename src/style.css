:root {
  /* https://github.com/system-fonts/modern-font-stacks#didone */
  font-family: Didot, 'Bodoni MT', 'Noto Serif Display', 'URW Palladio L', P052, Sylfaen, serif;
  font-weight: normal;
  /* font-size: 1.2em; */
  
  /* --primary: #5D6ACF;
  --primary-container: #A7AAEB;
  --green: #46822F;
  --green-container: #A3EB86;
  --red: #B5592F;
  --red-container: #EBA786; */
  --primary: hsl(235, 54%, 59%);
  --primary-container: hsl(235, 63%, 79%);
  --primary-surface: hsl(235, 43%, 90%);
  --green: hsl(103, 47%, 35%);
  --green-container: hsl(103, 72%, 72%);
  --green-surface: hsl(103, 52%, 90%);
  --red: hsl(20, 59%, 45%);
  --red-container: hsl(20, 72%, 72%);
  --red-surface: hsl(20, 52%, 90%);
  
  --current: var(--primary);
  --current-container: var(--primary-container);
  
  --transition: 70ms cubic-bezier(0, 0, 1, 1);
  --hero-transition: 300ms cubic-bezier(0, 0, 0, 1);
  --transition-step: 50ms;
}
body {
  margin: 0;
  min-height: 100vh;
}
body > h2 {
  text-align: center;
}

body > details#new-habbit {
  transition: background-color var(--hero-transition);
  --current: var(--green);
  --current-container: var(--green-container);
  --current-surface: var(--green-surface);
  padding: 1rem;
  background-color: var(--primary-container);
}
body > details#new-habbit[open] {
  background-color: var(--green-container);
}
body > details#new-habbit[open][negative] {
  background-color: var(--red-container);
  --current: var(--red);
  --current-container: var(--red-container);
  --current-surface: var(--red-surface);
}
body > details#new-habbit > summary {
  cursor: pointer;
}
body > details#new-habbit[open] > summary {
  margin-bottom: 0.5rem;
}
body > details#new-habbit > :is(input[type="checkbox"], label) {
  display: inline-block;
}
body > details#new-habbit > button {
  float: right;
}
body > details#new-habbit > input[type="text"] {
  width: 100%;
}

streak-tile {
  position: relative;
  display: grid;
  margin: 1rem 0;
  padding: 1rem 0.5rem;
  gap: 0.5rem;
  background: var(--current-surface);
  grid-template-areas:
    "name timeLeft button"
    "streaks streaks button";
  grid-template-columns: auto 3rem 5rem;
  align-items: center;
}
body > section#positive-habbits > streak-tile {
  --current: var(--green);
  --current-container: var(--green-container);
  --current-surface: var(--green-surface);
}
body > section#negative-habbits > streak-tile {
  --current: var(--red);
  --current-container: var(--red-container);
  --current-surface: var(--red-surface);
}
body > section#backup {
  display: flex;
  gap: 1rem;
  padding: 0 1rem 1rem;
  flex-wrap: wrap;
}
body > section#backup > hr {
  flex-basis: 100%;
}
body > section#backup > button:not(.icon) {
  flex: 1 1;
}
body > section#backup > input {
  margin: 0;
  max-width: calc(100% - 3rem);
  flex: 1 1;
}
streak-tile::after {
  content: "";
  position: absolute;
  inset: 0 auto 0 0;
  width: 1rem;
  background: linear-gradient(to right, var(--current-surface) 0.5rem, transparent 100%);
}
streak-tile > h3 {
  position: relative;
  margin: 0 0 0.5rem;
  font-weight: inherit;
  grid-area: name;
  z-index: 1;
}
streak-tile > span.timeLeft {
  grid-area: timeLeft;
  opacity: 0.5;
}
streak-tile > div.streaks {
  grid-area: streaks;
  display: flex;
  width: 100%;
  height: 2rem;
  gap: 0.1rem;
  justify-content: start;
  /* flex-direction: row-reverse; */
  direction: rtl;
  overflow-x: scroll;
  overflow-y: hidden;
}
@supports not selector(::-webkit-scrollbar) {
  streak-tile > div.streaks {
    scrollbar-width: none;
  }
}
streak-tile > div.streaks::-webkit-scrollbar {
  height: 0.1rem;
}
streak-tile > div.streaks::-webkit-scrollbar-thumb {
  transition: background-color var(--transition);
  background-color: transparent;
}
streak-tile:hover > div.streaks::-webkit-scrollbar-thumb {
  background-color: var(--current);
}
streak-tile > div.streaks > * {
  min-width: 1rem;
  height: 1rem;
  border-radius: 1rem;
  outline: solid 0.1rem var(--current);
  outline-offset: -0.3rem;
  padding: 0.5rem;
  flex-shrink: 0;
  text-align: center;
}
streak-tile > div.streaks > :first-child {
  outline: none;
  background-color: var(--current-container);
  animation: current-streak var(--hero-transition) calc(2 * var(--transition-step));
}
streak-tile:nth-child(1) > div.streaks > :first-child {
  animation: current-streak var(--hero-transition);
}
streak-tile:nth-child(2) > div.streaks > :first-child {
  animation: current-streak var(--hero-transition) var(--transition-step);
}
streak-tile > button {
  grid-area: button;
}
@keyframes current-streak {
  from {
    transform: translateY(-50%) rotate(70deg);
  }
}

body > footer.errors:not([shown]) {
  display: none;
}
:is(body, body > noscript) > footer.errors {
  position: sticky;
  top: 100vh;
  background-color: var(--red-container);
}
:is(body, body > noscript) > footer.errors::before {
  content: "Chyby:";
  padding: 0.5rem 0 0.25rem;
  display: block;
  text-align: center;
}
:is(body, body > noscript) > footer.errors > * {
  display: block;
  padding: 0.25rem;
  font-size: 0.7em;
  font-family: monospace;
}
:is(body, body > noscript) > footer.errors > :not(:first-child) {
  border-top: solid 1px var(--red);
}

label[for] {
  height: 1.5rem;
  padding: 0 0.25rem;
  line-height: 0.85rem;
  vertical-align: middle;
  cursor: pointer;
}

input[type="checkbox"] {
  cursor: pointer;
  position: relative;
  margin: 0;
  outline: none;
  width: 1.5rem;
  height: 1.5rem;
  transform: scale(0.75);
}
input[type="checkbox"]::after {
  transition: transform var(--transition);
  content: 'âœ”';
  transform: scale(1.5) rotate(17deg);
  position: absolute;
  inset: 0;
  color: transparent;
  border-radius: 50%;
  outline: 0.1rem solid var(--current);
  outline-offset: -0.1rem;
  background-color: var(--current-container);
  font-size: 115%;
  text-align: center;
  line-height: 1.5rem;
  vertical-align: middle;
  font-family: monospace;
}
input[type="checkbox"]:checked::after {
  color: #fff;
  background-color: var(--current);
  transform: scale(1.5);
}
input[type="checkbox"]:is(:hover, :focus)::after {
  outline-offset: 0.1rem;
}

button {
  cursor: pointer;
  position: relative;
  height: 2rem;
  border: none;
  border-radius: 0.85rem;
  padding: 0 1rem;
  outline: solid 0 #fff8;
  background: var(--current);
  color: #fff;
  font-family: inherit;
  font-weight: 700;
  text-wrap: nowrap;
  transition:
    outline var(--transition),
    outline-offset var(--transition);
}
button:disabled {
  cursor: unset;
  color: #fff8;
}
button:is(:hover, :focus):not(:disabled, :active) {
  outline: solid 0.2rem #fff8;
  outline-offset: -0.2rem;
  transition: none;
}
button.outlined, button.outlined:is(:hover, :focus) {
  outline: solid 0.15rem var(--current);
  outline-offset: -0.15rem;
}
button.outlined:disabled {
  cursor: unset;
  opacity: 0.5;
}
button.outlined:not(:hover, :focus) {
  transition:
  background var(--transition),
  color var(--transition);
}
button.outlined:is(:active, :disabled, :not(:hover, :focus)) {
  background: none;
  color: var(--current);
}
button.icon {
  width: 2rem;
  padding: 0;
}
button[waiting]::before {
  content: "";
  position: absolute;
  inset: 0 auto 0 0;
  width: 2rem;
  background: radial-gradient(circle at center, transparent calc(70% - 0.3rem), currentColor calc(70% - 0.3rem), currentColor 70%, transparent 70%);
  clip-path: inset(50% 0 0 0);
  transform: scale(50%);
  animation: button-waiting 500ms linear infinite;
}
/* TODO */
/* button[failed]::before {
  content: "!";
  position: absolute;
  inset: 0 auto 0 0;
  width: 2.05rem;
  line-height: 2rem;
  color: var(--current);
  background: #fff;
  clip-path: polygon(30% 75%, 25% 70%, 45% 25%, 55% 25%, 75% 70%, 70% 75%);
  font-family: monospace;
  font-size: 0.8rem;
  vertical-align: bottom;
} */
@keyframes button-waiting {
  to {
    transform: scale(50%) rotate(360deg);
  }
}

input:is([type="text"], [type="password"]) {
  transition: outline-offset var(--transition);
  height: 2rem;
  margin: 0.5rem 0;
  border: none;
  border-radius: 0.85rem;
  padding: 0 1rem;
  box-sizing: border-box;
  outline: solid var(--current) 0.15rem;
  outline-offset: -0.1rem;
  font-size: inherit;
  font-family: inherit;
}
input:is([type="text"], [type="password"]):is(:hover, :focus):not(:disabled) {
  outline-offset: 0;
}